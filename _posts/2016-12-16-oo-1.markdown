---
layout: post
title:  "面向对象的三个基本特征之封装"
date:   2016-12-16 12:49:42 +0800
description: "封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。"
categories: front article
---

面向对象的三个基本特征是：封装、继承、多态。

![面向对象基本特征](/images/oo/oo-1.gif)

### 封装

封装最好理解了。今天从封装开始。

封装是面向对象的特征之一，是对象和类概念的主要特性。

Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。

封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。


如果我们要把"属性"（property）和"方法"（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？

#### 一、 生成实例对象的原始模式

{% highlight javascript %}
function Cat(name,color) {
    return {
        name:name,
        color:color
    }
}
//调用函数，生成实例对象
var cat1 = Cat("大毛","黄色");
var cat2 = Cat("二毛","黑色");
{% endhighlight %}

这种方法的问题是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。

#### 二、构造函数模式

所谓"构造函数"，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。可参考[js创建对象之设计模式](http://blog.csdn.net/xi_2130/article/details/50110493)

##### 构造函数模式之一
{% highlight javascript %}
function Cat(name,color) {
    this.name=name;
    this.color=color;
    this.type = "猫科动物";
    this.eat = function() {
	alert("吃老鼠");
    };
}
//生成实例对象
var cat1 = new Cat("大毛","黄色");
var cat2 = new Cat("二毛","黑色");
alert(cat1.name); // 大毛
alert(cat1.color); // 黄色
alert(cat1.type); // 猫科动物
cat1.eat(); // 吃老鼠
alert(cat1.eat == cat2.eat); //false

//这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。
alert(cat1.constructor == Cat); //true
alert(cat2.constructor == Cat); //true

//Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。
alert(cat1 instanceof Cat); //true
alert(cat2 instanceof Cat); //true
{% endhighlight %}

弊端：构造函数方法很好用，但是存在一个浪费内存的问题。对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。

能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。

##### 构造函数模式之二（Prototype模式）

Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。

这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。

{% highlight javascript %}
function Cat(name,color) {
    this.name = name;
    this.color = color;
}
Cat.prototype.type = "猫科动物";
Cat.prototype.eat = function(){alert("吃老鼠")};

//生成实例
var cat1 = new Cat("大毛","黄色");
var cat2 = new Cat("二毛","黑色");
alert(cat1.type); // 猫科动物
cat1.eat(); // 吃老鼠

//这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。
alert(cat1.eat == cat2.eat); //true
{% endhighlight %}

Prototype模式的验证方法

为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。

{% highlight javascript %}
//isPrototypeOf()
//这个方法用来判断，某个proptotype对象和某个实例之间的关系。
alert(Cat.prototype.isPrototypeOf(cat1)); //true
alert(Cat.prototype.isPrototypeOf(cat2)); //true

//hasOwnProperty()
//每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。
alert(cat1.hasOwnProperty("name")); // true
alert(cat1.hasOwnProperty("type")); // false

//in运算符
//in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。
alert("name" in cat1); // true
alert("type" in cat1); // true

//in运算符还可以用来遍历某个对象的所有属性。
for (var prop in cat1) { 
    alert("cat1["+prop+"]="+cat1[prop]); 
}
{% endhighlight %}
